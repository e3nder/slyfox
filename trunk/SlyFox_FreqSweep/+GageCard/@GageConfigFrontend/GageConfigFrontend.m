classdef GageConfigFrontend
    %GAGECONFIGFRONTEND Frontend to control common properties of the
    %GageConfig
    %   This owns a TabPanel in the GUILayoutToolbox and acts as a
    %   frontend to control the common properties of a GageConfig object
    %   for running a GageCard.
    
    properties
        myPanel = uiextras.TabPanel();
        myGageConfig = GageCard.GageConfig();
    end
    
    methods
        function obj = GageConfigFrontend(f)
            obj.myPanel.Parent = f;
            acqP = uiextras.HBox('Parent', obj.myPanel, 'Tag', 'acqPanel');
                sampRateBP = uiextras.BoxPanel(...
                    'Parent', acqP, ...
                    'Tag', 'sampRateBP', ...
                    'Title', 'Sample Rate(Hz)');
                sampRateVB = uiextras.VBox(...
                    'Parent', sampRateBP);
                uicontrol(...
                    'Parent', sampRateVB, ...
                    'Style', 'popupmenu', ...
                    'Tag', 'sampleRate', ...
                    'String', {'10000000', '5000000', '2500000',...
                    '1000000', '500000', '200000', '100000', '50000', ...
                    '20000', '10000', '5000', '2000', '1000'}, ...
                    'BackgroundColor', 'White', ...
                    'Callback', @obj.updateGageConfig);
                uiextras.Empty('Parent', sampRateVB);
                set(sampRateVB, 'Sizes', [-1 -9], 'Spacing', 5);
                
                pointsBP = uiextras.BoxPanel(...
                    'Parent', acqP, ...
                    'Tag', 'pointsBP', ...
                    'Title', 'Number of Points (>=128)');
                pointsVB = uiextras.VBox(...
                    'Parent', pointsBP);
                uicontrol(...
                    'Parent', pointsVB, ...
                    'Style', 'edit', ...
                    'Tag', 'numPoints', ...
                    'String', 12032, ...
                    'BackgroundColor', 'White', ...
                    'Callback', @obj.updateGageConfig);
                uiextras.Empty('Parent', pointsVB);
                set(pointsVB, 'Sizes', [-1 -9], 'Spacing', 5);
                
                segCountsBP = uiextras.BoxPanel(...
                    'Parent', acqP, ...
                    'Tag', 'pointsBP', ...
                    'Title', 'Number of Triggered Acquisitions');
                segCountsVB = uiextras.VBox(...
                    'Parent', segCountsBP);
                uicontrol(...
                    'Parent', segCountsVB, ...
                    'Style', 'edit', ...
                    'Tag', 'segCounts', ...
                    'String', 3, ...
                    'BackgroundColor', 'White', ...
                    'Callback', @obj.updateGageConfig);
                uiextras.Empty('Parent', segCountsVB);
                set(segCountsVB, 'Sizes', [-1 -9], 'Spacing', 5);

            trigP = uiextras.Grid('Parent',obj.myPanel, 'Tag', 'trigPanel');
                slopeBP = uiextras.BoxPanel(...
                    'Parent', trigP, ...
                    'Tag', 'slopeBP', ...
                    'Title', 'Trigger Slope');
                slopeVB = uiextras.VBox(...
                    'Parent', slopeBP);
                uicontrol(...
                    'Parent', slopeVB, ...
                    'Style', 'popupmenu', ...
                    'Tag', 'trigSlope', ...
                    'String', {'Positive','Negative'}, ...
                    'BackgroundColor', 'White', ...
                    'Callback', @obj.updateGageConfig);
                uiextras.Empty('Parent', slopeVB);
                set(slopeVB, 'Sizes', [-1 -9], 'Spacing', 5);
                
                trigLevelBP = uiextras.BoxPanel(...
                    'Parent', trigP, ...
                    'Tag', 'trigLevelBP', ...
                    'Title', 'Trigger Level (% of Range)');
                trigLevelVB = uiextras.VBox(...
                    'Parent', trigLevelBP);
                uicontrol(...
                    'Parent', trigLevelVB, ...
                    'Style', 'edit', ...
                    'Tag', 'trigLevel', ...
                    'String', 20, ...
                    'BackgroundColor', 'White', ...
                    'Callback', @obj.updateGageConfig);
                uiextras.Empty('Parent', trigLevelVB);
                set(trigLevelVB, 'Sizes', [-1 -9], 'Spacing', 5);
                
                trigSourceBP = uiextras.BoxPanel(...
                    'Parent', trigP, ...
                    'Tag', 'trigSourceBP', ...
                    'Title', 'Trigger Source');
                trigSourceVB = uiextras.VBox(...
                    'Parent', trigSourceBP);
                uicontrol(...
                    'Parent', trigSourceVB, ...
                    'Style', 'popupmenu', ...
                    'Tag', 'trigSource', ...
                    'String', {'External', '1','2'}, ...
                    'BackgroundColor', 'White', ...
                    'Callback', @obj.updateGageConfig);
                uiextras.Empty('Parent', trigSourceVB);
                set(trigSourceVB, 'Sizes', [-1 -9], 'Spacing', 5);

            
            ch1P = uiextras.Grid('Parent',obj.myPanel, 'Tag', 'Ch1Panel');
            ch2P = uiextras.Grid('Parent',obj.myPanel, 'Tag', 'Ch2Panel');
            obj.myPanel.TabNames = {'Acquire', 'Trigger', 'Ch1', 'Ch2'};
        end
        function updateGageConfig(hObject, eventData, varargin)
            myHandles = guihandles(hObject.myPanel.Parent);
            l3 = get(myHandles.sampleRate, 'String');
            i3 = get(myHandles.sampleRate, 'Value');
            myGageConfig.acqInfo.SampleRate = str2double(l3{i3});
            if str2double(get(myHandles.numPoints, 'String'))/64 ~= 0
                set(myHandles.numPoints, 'String', num2str(64*round(str2double(get(myHandles.numPoints, 'String'))/64)))
            end
            myGageConfig.acqInfo.Depth = str2double(get(myHandles.numPoints, 'String'));
    
            myGageConfig.acqInfo.SegmentSize = str2double(get(myHandles.numPoints, 'String'));
            myGageConfig.acqInfo.SegmentCounts = str2double(get(myHandles.segCounts, 'String'));
            l1 = get(myHandles.trigSlope,'String');
            i1 = get(myHandles.trigSlope,'Value');
            myGageConfig.trig.Slope =  CsMl_Translate(l1{i1}, 'Slope');
            myGageConfig.trig.Level =  str2double(get(myHandles.trigLevel, 'String'));
            l2 = get(myHandles.trigSource,'String');
            i2 = get(myHandles.trigSource,'Value');
            if i2==1
                 myGageConfig.trig.Slope =  CsMl_Translate(l2{i2}, 'Source');
            else
                 myGageConfig.trig.Slope =  str2double(l2{i2});
            end

        end
    end
    
end

