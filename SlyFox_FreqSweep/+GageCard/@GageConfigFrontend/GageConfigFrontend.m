classdef GageConfigFrontend
    %GAGECONFIGFRONTEND Frontend to control common properties of the
    %GageConfig
    %   This owns a TabPanel in the GUILayoutToolbox and acts as a
    %   frontend to control the common properties of a GageConfig object
    %   for running a GageCard.
    
    properties
        myPanel = uiextras.TabPanel();
        myGageConfig = GageCard.GageConfig();
        myTopFigure = [];
    end
    
    methods
        function obj = GageConfigFrontend(top,f)
            obj.myTopFigure = top;
            set(obj.myPanel, 'Parent', f);
            acqP = uiextras.HBox('Parent', obj.myPanel, 'Tag', 'acqPanel');
                sampRateBP = uiextras.BoxPanel(...
                    'Parent', acqP, ...
                    'Tag', 'sampRateBP', ...
                    'Title', 'Sample Rate(Hz)');
                sampRateVB = uiextras.VBox(...
                    'Parent', sampRateBP);
                uicontrol(...
                    'Parent', sampRateVB, ...
                    'Style', 'popupmenu', ...
                    'Tag', 'sampleRate', ...
                    'String', {'10000000', '5000000', '2500000',...
                    '1000000', '500000', '200000', '100000', '50000', ...
                    '20000', '10000', '5000', '2000', '1000'}, ...
                    'BackgroundColor', 'White', ...
                    'Callback', @obj.updateGageConfig);
                uiextras.Empty('Parent', sampRateVB);
                set(sampRateVB, 'Sizes', [-1 -9], 'Spacing', 5);
                
                pointsBP = uiextras.BoxPanel(...
                    'Parent', acqP, ...
                    'Tag', 'pointsBP', ...
                    'Title', 'Number of Points (>=128)');
                pointsVB = uiextras.VBox(...
                    'Parent', pointsBP);
                uicontrol(...
                    'Parent', pointsVB, ...
                    'Style', 'edit', ...
                    'Tag', 'numPoints', ...
                    'String', 12032, ...
                    'BackgroundColor', 'White', ...
                    'Callback', @obj.updateGageConfig);
                uiextras.Empty('Parent', pointsVB);
                set(pointsVB, 'Sizes', [-1 -9], 'Spacing', 5);
                
                segCountsBP = uiextras.BoxPanel(...
                    'Parent', acqP, ...
                    'Tag', 'pointsBP', ...
                    'Title', 'Number of Triggered Acquisitions');
                segCountsVB = uiextras.VBox(...
                    'Parent', segCountsBP);
                uicontrol(...
                    'Parent', segCountsVB, ...
                    'Style', 'edit', ...
                    'Tag', 'segCounts', ...
                    'String', 3, ...
                    'BackgroundColor', 'White', ...
                    'Callback', @obj.updateGageConfig);
                uiextras.Empty('Parent', segCountsVB);
                set(segCountsVB, 'Sizes', [-1 -9], 'Spacing', 5);

            trigP = uiextras.Grid('Parent',obj.myPanel, 'Tag', 'trigPanel');
                slopeBP = uiextras.BoxPanel(...
                    'Parent', trigP, ...
                    'Tag', 'slopeBP', ...
                    'Title', 'Trigger Slope');
                slopeVB = uiextras.VBox(...
                    'Parent', slopeBP);
                uicontrol(...
                    'Parent', slopeVB, ...
                    'Style', 'popupmenu', ...
                    'Tag', 'trigSlope', ...
                    'String', {'Positive','Negative'}, ...
                    'BackgroundColor', 'White', ...
                    'Callback', @obj.updateGageConfig);
                uiextras.Empty('Parent', slopeVB);
                set(slopeVB, 'Sizes', [-1 -9], 'Spacing', 5);
                
                trigLevelBP = uiextras.BoxPanel(...
                    'Parent', trigP, ...
                    'Tag', 'trigLevelBP', ...
                    'Title', 'Trigger Level (% of Range)');
                trigLevelVB = uiextras.VBox(...
                    'Parent', trigLevelBP);
                uicontrol(...
                    'Parent', trigLevelVB, ...
                    'Style', 'edit', ...
                    'Tag', 'trigLevel', ...
                    'String', 20, ...
                    'BackgroundColor', 'White', ...
                    'Callback', @obj.updateGageConfig);
                uiextras.Empty('Parent', trigLevelVB);
                set(trigLevelVB, 'Sizes', [-1 -9], 'Spacing', 5);
                
                trigSourceBP = uiextras.BoxPanel(...
                    'Parent', trigP, ...
                    'Tag', 'trigSourceBP', ...
                    'Title', 'Trigger Source');
                trigSourceVB = uiextras.VBox(...
                    'Parent', trigSourceBP);
                uicontrol(...
                    'Parent', trigSourceVB, ...
                    'Style', 'popupmenu', ...
                    'Tag', 'trigSource', ...
                    'String', {'External', '1','2'}, ...
                    'BackgroundColor', 'White', ...
                    'Callback', @obj.updateGageConfig);
                uiextras.Empty('Parent', trigSourceVB);
                set(trigSourceVB, 'Sizes', [-1 -9], 'Spacing', 5);

            
            ch1P = uiextras.Grid('Parent',obj.myPanel, 'Tag', 'Ch1Panel');
                chanRange1BP = uiextras.BoxPanel(...
                    'Parent', ch1P, ...
                    'Tag', 'chanRange1BP', ...
                    'Title', 'Channel Input Range');
                chanRange1VB = uiextras.VBox(...
                    'Parent', chanRange1BP);
                uicontrol(...
                    'Parent', chanRange1VB, ...
                    'Style', 'popupmenu', ...
                    'Tag', 'chanRange1', ...
                    'String', {'±500mV', '±1V','±2V','±5V','±10V'}, ...
                    'BackgroundColor', 'White', ...
                    'Callback', @obj.updateGageConfig);
                uiextras.Empty('Parent', chanRange1VB);
                set(chanRange1VB, 'Sizes', [-1 -9], 'Spacing', 5);
                
                chanImp1BP = uiextras.BoxPanel(...
                    'Parent', ch1P, ...
                    'Tag', 'chanImp1BP', ...
                    'Title', 'Channel Input Impedance');
                chanImp1VB = uiextras.VBox(...
                    'Parent', chanImp1BP);
                uicontrol(...
                    'Parent', chanImp1VB, ...
                    'Style', 'popupmenu', ...
                    'Tag', 'chanImp1', ...
                    'String', {'50 Ohms', '1 MOhm'}, ...
                    'BackgroundColor', 'White', ...
                    'Callback', @obj.updateGageConfig);
                uiextras.Empty('Parent', chanImp1VB);
                set(chanImp1VB, 'Sizes', [-1 -9], 'Spacing', 5);
            ch2P = uiextras.Grid('Parent',obj.myPanel, 'Tag', 'Ch2Panel');
            chanRange2BP = uiextras.BoxPanel(...
                    'Parent', ch2P, ...
                    'Tag', 'chanRange2BP', ...
                    'Title', 'Channel Input Range');
                chanRange2VB = uiextras.VBox(...
                    'Parent', chanRange2BP);
                uicontrol(...
                    'Parent', chanRange2VB, ...
                    'Style', 'popupmenu', ...
                    'Tag', 'chanRange2', ...
                    'String', {'±500mV', '±1V','±2V','±5V','±10V'}, ...
                    'BackgroundColor', 'White', ...
                    'Callback', @obj.updateGageConfig);
                uiextras.Empty('Parent', chanRange2VB);
                set(chanRange2VB, 'Sizes', [-1 -9], 'Spacing', 5);
                
                chanImp2BP = uiextras.BoxPanel(...
                    'Parent', ch2P, ...
                    'Tag', 'chanImp2BP', ...
                    'Title', 'Channel Input Impedance');
                chanImp2VB = uiextras.VBox(...
                    'Parent', chanImp2BP);
                uicontrol(...
                    'Parent', chanImp2VB, ...
                    'Style', 'popupmenu', ...
                    'Tag', 'chanImp2', ...
                    'String', {'50 Ohms', '1 MOhm'}, ...
                    'BackgroundColor', 'White', ...
                    'Callback', @obj.updateGageConfig);
                uiextras.Empty('Parent', chanImp2VB);
                set(chanImp2VB, 'Sizes', [-1 -9], 'Spacing', 5);
            obj.myPanel.TabNames = {'Acquire', 'Trigger', 'Ch1', 'Ch2'};
            myHandles = guihandles(top);
            guidata(top, myHandles);
            obj.loadState();
        end
        function updateGageConfig(hObject, eventData, varargin)
            myHandles = guidata(hObject.myTopFigure);
            l3 = get(myHandles.sampleRate, 'String');
            i3 = get(myHandles.sampleRate, 'Value');
            myGageConfig.acqInfo.SampleRate = str2double(l3{i3});
            if str2double(get(myHandles.numPoints, 'String'))/64 ~= 0
                set(myHandles.numPoints, 'String', num2str(64*round(str2double(get(myHandles.numPoints, 'String'))/64)))
            end
            myGageConfig.acqInfo.Depth = str2double(get(myHandles.numPoints, 'String'));
    
            myGageConfig.acqInfo.SegmentSize = str2double(get(myHandles.numPoints, 'String'));
            myGageConfig.acqInfo.SegmentCounts = str2double(get(myHandles.segCounts, 'String'));
            l1 = get(myHandles.trigSlope,'String');
            i1 = get(myHandles.trigSlope,'Value');
            myGageConfig.trig.Slope =  CsMl_Translate(l1{i1}, 'Slope');
            myGageConfig.trig.Level =  str2double(get(myHandles.trigLevel, 'String'));
            l2 = get(myHandles.trigSource,'String');
            i2 = get(myHandles.trigSource,'Value');
            if i2==1
                 myGageConfig.trig.Source =  CsMl_Translate(l2{i2}, 'Source');
            else
                 myGageConfig.trig.Source =  str2double(l2{i2});
            end
            i3 = get(myHandles.chanRange1, 'Value');
            switch i3
                case 1
                    tempRange = 1000;
                case 2
                    tempRange = 2000;
                case 3
                    tempRange = 4000;
                case 4
                    tempRange = 10000;
                otherwise
                    tempRange = 20000;
            end
            myGageConfig.chan(1).InputRange = tempRange;
            i4 = get(myHandles.chanImp1, 'Value');
            switch i4
                case 1
                    myGageConfig.chan(1).Impedance = 50;
                case 2
                    myGageConfig.chan(1).Impedance = 1000000;
            end
            i3 = get(myHandles.chanRange2, 'Value');
            switch i3
                case 1
                    tempRange = 1000;
                case 2
                    tempRange = 2000;
                case 3
                    tempRange = 4000;
                case 4
                    tempRange = 10000;
                otherwise
                    tempRange = 20000;
            end
            myGageConfig.chan(2).InputRange = tempRange;
            i4 = get(myHandles.chanImp2, 'Value');
            switch i4
                case 1
                    myGageConfig.chan(2).Impedance = 50;
                case 2
                    myGageConfig.chan(2).Impedance = 1000000;
            end
            guidata(hObject.myTopFigure, myHandles);
        end
        function saveState(hObject)
            myHandles = guidata(hObject.myTopFigure);
            gageState.sampleRate = get(myHandles.sampleRate, 'Value');
            gageState.numPoints = get(myHandles.numPoints, 'String');
            gageState.segCounts = get(myHandles.segCounts, 'String');
            gageState.trigSlope = get(myHandles.trigSlope, 'Value');
            gageState.trigLevel = get(myHandles.trigLevel, 'String');
            gageState.trigSource = get(myHandles.trigSource, 'Value');
            gageState.chanRange1 = get(myHandles.chanRange1, 'Value');
            gageState.chanImp1 = get(myHandles.chanImp1, 'Value');
            gageState.chanRange2 = get(myHandles.chanRange2, 'Value');
            gageState.chanImp2 = get(myHandles.chanImp2, 'Value');
            save gageState
        end
        function loadState(obj)
            try
                load gageState
                myHandles = guidata(obj.myTopFigure);
                set(myHandles.sampleRate, 'Value', gageState.sampleRate);
                set(myHandles.numPoints, 'String', gageState.numPoints);
                set(myHandles.segCounts, 'String', gageState.segCounts);
                set(myHandles.trigSlope, 'Value', gageState.trigSlope);
                set(myHandles.trigLevel, 'String', gageState.trigLevel);
                set(myHandles.trigSource, 'Value', gageState.trigSource);
                set(myHandles.chanRange1, 'Value', gageState.chanRange1);
                set(myHandles.chanImp1, 'Value', gageState.chanImp1);
                set(myHandles.chanRange2, 'Value', gageState.chanRange2);
                set(myHandles.chanImp2, 'Value', gageState.chanImp2);
                guidata(obj.myTopFigure, myHandles);
                obj.updateGageConfig(1);
            catch
                disp('No saved state for GageCardFrontend Exists')
            end
        end
    end
    
end

